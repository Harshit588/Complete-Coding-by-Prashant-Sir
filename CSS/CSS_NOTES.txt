CSS NOTES => 

1. Level -> CSS Basic.

     Cascading Style Sheets.
        1. CSS is a style sheet language used for describing the presentation of a document written in HTML or XML.
        2. CSS describes how HTML elements should be displayed on screen, paper, or in other media.
        3. CSS can control the layout of multiple web pages all at once.
        4. External stylesheets are stored in CSS files.

    

        1. Styling Types -> 
            1. Inline -> 
                1. <h1 style="color: red;">Hello World</h1> -> h1 tag with red color.
                2. <p style="font-size: 20px;">Hello World</p> -> p tag with font size of 20px.
                3. <body style="background-color: blue;">Hello World</body> -> body tag with blue background color.
            2. Internal -> 
                1. <style> h1 { color: red; } </style> -> h1 tag with red color.
                2. <style> p { font-size: 20px; } </style> -> p tag with font size of 20px.
                3. <style> body { background-color: blue; } </style> -> body tag with blue background color.
            3. External -> 
                1. <link rel="stylesheet" type="text/css" href="style.css"> -> link to external CSS file.

        2. DOM -> Document Object Model.
                uses -> a. Structure Understanding.
                        b. Dynamic Styling

        3. Comments -> 
            1. Single line -> /* comment */ -> single line comment.
            2. Multi line -> /* comment */ -> multi line comment.

        4. selector { property: value; } -> CSS syntex.
            ex -> h1 { color: red; } -> h1 tag with red color.
            ex -> p { font-size: 20px; } -> p tag with font size of 20px.
            ex -> body { background-color: blue; } -> body tag with blue background color.

            => Types of selector ->
                a. Universal selector -> * { property: value; } -> applies to all elements.
                b. Type selector -> h1 { property: value; } -> applies to all h1 elements.
                c. id and class selector -> 
                        #id { property: value; } -> applies to all elements with id.
                        .class { property: value; } -> applies to all elements with class.
            d. Grouping selector -> h1, p { property: value; } -> applies to all h1 and p elements.
            e. Descendant selector -> div p { property: value; } -> applies to all p elements inside div.

        5. Colour property -> 
          1. color -> Text color.
            ex -> h1 { color: red; } -> h1 tag with red color.
            ex -> p { color: blue; } -> p tag with blue color.
            ex -> body { color: green; } -> body tag with green color.


2. Level2 -> Background 

        1. background-color -> Background color.
            ex -> h1 { background-color: red; } -> h1 tag with red background color.
            ex -> p { background-color: blue; } -> p tag with blue background color.
            ex -> body { background-color: green; } -> body tag with green background color.

        2. Absolute unit -> 
            1. px -> Pixels. -> 1px = 1/96 inch. -> 1px = 0.75pt.
            2. cm -> Centimeters.
            3. mm -> Millimeters.
            4. in -> Inches.
            5. pt -> Points.
            6. pc -> Picas.

        3. Height and Width -> 
            1. height -> Height of the element.
                ex -> h1 { height: 100px; } -> h1 tag with height of 100px.
                ex -> p { height: 200px; } -> p tag with height of 200px.
                ex -> body { height: 300px; } -> body tag with height of 300px.

            2. width -> Width of the element.
                ex -> h1 { width: 100px; } -> h1 tag with width of 100px.
                ex -> p { width: 200px; } -> p tag with width of 200px.
                ex -> body { width: 300px; } -> body tag with width of 300px. 

            3. Background image -> Background image.
                ex-> html -> <div id="icon"></div>
                    css->
                        #icon {
                            height: 500px;
                            width: 400px;
                            background-image: url(https://w7.pngwing.com/pngs/390/229/png-transparent-logo-html5-brand-design-text-logo-number.png);
                            background-size: contain;
                            background-repeat: no-repeat;
                        }

            4. Visibility -> Visibility of the element.
                1. visible -> Element is visible.
                    ex -> h1 { visibility: visible; } -> h1 tag is visible.
                    ex -> p { visibility: visible; } -> p tag is visible.
                    ex -> body { visibility: visible; } -> body tag is visible.

                2. hidden -> Element is hidden.
                    ex -> h1 { visibility: hidden; } -> h1 tag is hidden.
                    ex -> p { visibility: hidden; } -> p tag is hidden.
                    ex -> body { visibility: hidden; } -> body tag is hidden.

                3. collapse -> Element is collapsed.
                    ex -> h1 { visibility: collapse; } -> h1 tag is collapsed.
                    ex -> p { visibility: collapse; } -> p tag is collapsed.
                    ex -> body { visibility: collapse; } -> body tag is collapsed.

            5. Opacity -> Opacity of the element.
                1. opacity -> Opacity of the element.
                    ex -> h1 { opacity: 0.5; } -> h1 tag with opacity of 0.5.
                    ex -> p { opacity: 0.5; } -> p tag with opacity of 0.5.
                    ex -> body { opacity: 0.5; } -> body tag with opacity of 0.5.
            
            6. shorthand property -> 
                example -> 
                        background: url('/CSS/Images/CodingImage.jpg') no-repeat center/cover; -> background image with no repeat and center position.

3. Level3 -> Text properties ->
    
        1. text-align -> Text alignment.
            1. left -> Text is aligned to the left.
                ex -> h1 { text-align: left; } -> h1 tag with left alignment.
                ex -> p { text-align: left; } -> p tag with left alignment.
                ex -> body { text-align: left; } -> body tag with left alignment.

            2. right -> Text is aligned to the right.
                ex -> h1 { text-align: right; } -> h1 tag with right alignment.
                ex -> p { text-align: right; } -> p tag with right alignment.
                ex -> body { text-align: right; } -> body tag with right alignment.

            3. center -> Text is aligned to the center.
                ex -> h1 { text-align: center; } -> h1 tag with center alignment.
                ex -> p { text-align: center; } -> p tag with center alignment.
                ex -> body { text-align: center; } -> body tag with center alignment.

            4. justify -> Text is justified.
                ex -> h1 { text-align: justify; } -> h1 tag with justified alignment.
                ex -> p { text-align: justify; } -> p tag with justified alignment.
                ex -> body { text-align: justify; } -> body tag with justified alignment.

        2. Text Decoration properties -> 
            1. text-decoration -> Text decoration.
                1. UnderLine ->  
                    example -> h1 { text-decoration: underline; } -> h1 tag with underline.
                2. OverLine -> 
                    example -> h1 { text-decoration: overline; } -> h1 tag with overline.
                3. LineThrough ->
                    example -> h1 { text-decoration: line-through; } -> h1 tag with line-through.
                4. None -> 
                    example -> h1 { text-decoration: none; } -> h1 tag with no decoration.
            
            2. text-decoration-style -> Text decoration style.
                1. solid -> Solid line.
                    example -> h1 { text-decoration-style: solid; } -> h1 tag with solid line.
                2. double -> Double line.
                    example -> h1 { text-decoration-style: double; } -> h1 tag with double line.
                3. dotted -> Dotted line.
                    example -> h1 { text-decoration-style: dotted; } -> h1 tag with dotted line.
                4. dashed -> Dashed line.
                    example -> h1 { text-decoration-style: dashed; } -> h1 tag with dashed line.
                5. wavy -> Wavy line.
                    example -> h1 { text-decoration-style: wavy; } -> h1 tag with wavy line.

            3. text-decoration-color -> Text decoration color.
                example -> h1 { text-decoration-color: red; } -> h1 tag with red decoration color.
                example -> p { text-decoration-color: blue; } -> p tag with blue decoration color.

            4. text transform -> Text transform.
                1. capitalize -> Capitalize the first letter of each word.
                    example -> h1 { text-transform: capitalize; } -> h1 tag with capitalize.
                2. uppercase -> Convert to uppercase.
                    example -> h1 { text-transform: uppercase; } -> h1 tag with uppercase.
                3. lowercase -> Convert to lowercase.
                    example -> h1 { text-transform: lowercase; } -> h1 tag with lowercase.

            5. Line height -> Line height.
                example -> h1 { line-height: 1.5; } -> h1 tag with line height of 1.5.
                example -> p { line-height: 2; } -> p tag with line height of 2.

            6. font size -> Font size.
                example -> h1 { font-size: 20px; } -> h1 tag with font size of 20px.
                example -> p { font-size: 30px; } -> p tag with font size of 30px.
            
            7. font weight -> Font weight.
                1. normal -> Normal font weight.
                    example -> h1 { font-weight: normal; } -> h1 tag with normal font weight.
                    example -> p { font-weight: normal; } -> p tag with normal font weight.

                2. bold -> Bold font weight.
                    example -> h1 { font-weight: bold; } -> h1 tag with bold font weight.
                    example -> p { font-weight: bold; } -> p tag with bold font weight.

                3. bolder -> Bolder font weight.
                    example -> h1 { font-weight: bolder; } -> h1 tag with bolder font weight.
                    example -> p { font-weight: bolder; } -> p tag with bolder font weight.

                4. lighter -> Lighter font weight.
                    example -> h1 { font-weight: lighter; } -> h1 tag with lighter font weight.
                    example -> p { font-weight: lighter; } -> p tag with lighter font weight.
            
            8. font Style -> Font style.
                1. normal -> Normal font style.
                    example -> h1 { font-style: normal; } -> h1 tag with normal font style.
                    example -> p { font-style: normal; } -> p tag with normal font style.

                2. italic -> Italic font style.
                    example -> h1 { font-style: italic; } -> h1 tag with italic font style.
                    example -> p { font-style: italic; } -> p tag with italic font style.

                3. oblique -> Oblique font style.
                    example -> h1 { font-style: oblique; } -> h1 tag with oblique font style.
                    example -> p { font-style: oblique; } -> p tag with oblique font style.

            9. font family -> Font family.
                1. serif -> Serif font family.
                    example -> h1 { font-family: serif; } -> h1 tag with serif font family.
                    example -> p { font-family: serif; } -> p tag with serif font family.

                2. sans-serif -> Sans-serif font family.
                    example -> h1 { font-family: sans-serif; } -> h1 tag with sans-serif font family.
                    example -> p { font-family: sans-serif; } -> p tag with sans-serif font family.

                3. monospace -> Monospace font family.
                    example -> h1 { font-family: monospace; } -> h1 tag with monospace font family.
                    example -> p { font-family: monospace; } -> p tag with monospace font family.

                4. cursive -> Cursive font family.
                    example -> h1 { font-family: cursive; } -> h1 tag with cursive font family.
                    example -> p { font-family: cursive; } -> p tag with cursive font family.

                5. fantasy -> Fantasy font family.
                    example -> h1 { font-family: fantasy; } -> h1 tag with fantasy font family.
                    example -> p { font-family: fantasy; } -> p tag with fantasy font family.

            10. Icons using Fonts -> using google 

                    example ->   <link rel="stylesheet" 
                                        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@40,400,0,0&icon_names=menu" />

                                <span class="material-symbols-outlined">
                                    <a href="www.google.com" style="text-decoration: none;">menu</a>
                                </span>

                
